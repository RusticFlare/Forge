# string_eval : (string, sounds) -> sounds
define :string_eval do |str,sounds|
  str = string_convert str
  if valid_string?(str)
    if is_array? str
      strs = split_list str
      with_bpm_mul(strs.size) do
        strs.each do |s|
          sounds = string_eval(s,sounds)
        end
      end
    else
      strs = split_concurrent str
      array_present = false
      strs.each do |s|
        if is_array? s
          array_present = true
        end
      end
      if array_present
        strs = merge_arrays strs
        with_bpm_mul(strs.size) do
          strs.each do |s|
            sounds = string_eval(s,sounds)
          end
        end
      else
        strs.each_index do |i|
          strs[i] = strs[i].to_sym
        end
        sounds << { :sounds => strs, :sleep => current_beat_duration}
      end
    end
    return sounds
  end
end

# split_list : string -> string array
define :split_list do |str|
  str = str[1,str.length-2]
  strs = str.split(/\s*,\s*/,-1)
  strs.each_index do |i|
    while !valid_string?(strs[i])
      strs[i] << ',' << strs[i+1]
      strs.delete_at(i+1)
    end
  end
  return strs
end

define :split_concurrent do |str|
  strs = str.split(/\s+/)
  strs.each_index do |i|
    while !valid_string?(strs[i])
      strs[i] << " " << strs[i+1]
      strs.delete_at(i+1)
    end
  end
  return strs
end

define :valid_string? do |str|
  stack = []
  symbols = { '[' => ']', '(' => ')' }
  str.each_char do |c|
    if symbols.key?(c)
      stack << c
    end
    if symbols.key(c) && symbols.key(c) != stack.pop
      return false
    end
  end
  stack.empty?
end

define :is_array? do |str|
  if !str.start_with?('[')
    return false
  end
  stack = []
  symbols = { '[' => ']' }
  x = 0
  str.each_char do |c|
    x += 1
    if symbols.key?(c)
      stack << c
    end
    if symbols.key(c) && symbols.key(c) != stack.pop
      return false
    end
    if stack.empty? && x != str.length
      return false
    end
  end
  stack.empty?
end

define :merge_arrays do |strs|
  new_size = 1
  strs.each_index do |i|
    if !is_array? strs[i]
      strs[i] = "[" + strs[i] + "]"
    end
    strs[i] = split_list strs[i]
    new_size = new_size.lcm strs[i].length
  end
  sounds = Array.new(new_size)
  strs.each do |str|
    str.each_index do |i|
      index = (i.to_r / str.length.to_r) * sounds.length
      if sounds[index] == nil
        sounds[index] = str[i]
      else
        sounds[index] << " " << str[i]
      end
    end
  end
  sounds.each_index do |i|
    if sounds[i] == nil
      sounds[i] = "x"
    end
  end
  return sounds
end

define :string_convert do |str|
  str = space_input str
  strs = str.split(/\*/)
  while strs.length > 1
    strs1 = strs[0].split(/\s+/)
    symbol = ' ' + strs1.pop
    while !valid_string? symbol
      symbol = ' ' + strs1.pop + symbol
    end

    strs[0] = ""
    strs1.each do |str1|
      strs[0] = strs[0] + ' ' + str1
    end

    strs2 = strs[1].split(/\s+/,2)
    head = strs2.shift
    repeats = head.to_i
    strs[1] = strs2[0] != nil ? strs2[0] : ""

    arr = Array.new(repeats,symbol)
    arr = arr.to_s
    arr.gsub!(/\"/, '')

    strs[0] = strs[0] + ' ' + arr  + ' ' + strs[1]
    strs.delete_at 1
  end
  return strs[0].strip
end

define :space_input do |str|
  str.gsub!(/\[|\]|,|\(|\)/) do |s|
    ' ' + s + ' '
  end
  return str
end

puts(string_convert("k(3,8)"))

puts(string_convert("s*2*2") == "[ [ s, s],  [ s, s]]")
puts(string_convert("s*2") == "[ s,  s]")
puts(string_convert("s *2") == "[ s,  s]")
puts(string_convert("[s k]*2") == "[ [ s k ],  [ s k ]]")

puts(string_eval("k",[]) == string_eval("[k]",Array.new))
puts(string_eval("k*2",[]) == [{:sounds=>[:k], :sleep=>0.5}, {:sounds=>[:k], :sleep=>0.5}])
puts(string_eval("[k]",[]) == [{:sounds=>[:k], :sleep=>1.0}])
puts(string_eval("[k s]",[]) == [{:sounds=>[:k, :s], :sleep=>1.0}])
puts(string_eval("[k, k] [s]",[]) == [{:sounds=>[:k, :s], :sleep=>0.5}, {:sounds=>[:k], :sleep=>0.5}])
puts(string_eval("[k k] [s]",[]) == [{:sounds=>[:k, :k, :s], :sleep=>1.0}])
puts(string_eval("[k, s]",[]) == [{:sounds=>[:k], :sleep=>0.5}, {:sounds=>[:s], :sleep=>0.5}])
puts(string_eval("[k,k,k,k] [s,s]",[]) == [{:sounds=>[:k, :s], :sleep=>0.25}, {:sounds=>[:k], :sleep=>0.25}, {:sounds=>[:k, :s], :sleep=>0.25}, {:sounds=>[:k], :sleep=>0.25}])
puts(string_eval("[k,k,k] [s,s]",[]) == [{:sounds=>[:k, :s], :sleep=>0.16666666666666666}, {:sounds=>[:x], :sleep=>0.16666666666666666}, {:sounds=>[:k], :sleep=>0.16666666666666666}, {:sounds=>[:s], :sleep=>0.16666666666666666}, {:sounds=>[:k], :sleep=>0.16666666666666666}, {:sounds=>[:x], :sleep=>0.16666666666666666}])

puts(!is_array?(""))
puts(is_array?("[]"))
puts(!is_array?("[][]"))
puts(!is_array?("[] []"))
puts(is_array?("[[]]"))
puts(!is_array?("[]()"))